import bs4 as bs4
import sqlite3
import requests
import os.path
import io
from urllib.request import urlopen

import vk_api
# from vk_api.longpoll import *
# from vk_api.keyboard import *
from vk_api.utils import get_random_id


token = "b1652a5628af75bb7a91fd5cb0b47aae8699a941ad25c637ad6573ca49c157f722036e551983aca45fdd1"
vk = vk_api.VkApi(token=token)
class VkBot:
    def __init__(self, user_id):
        self.API_KEY = '40d1649f-0493-4b70-98ba-98533de7710b'
        print("\n–°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞!")
        self._USER_ID = user_id
        self._USERNAME = self._get_user_name_from_vk_id(user_id)
        self._COMMANDS = ["–ü–†–ò–í–ï–¢", "–ö–£–†–¨–ï–†", "–†–ê–ë–û–¢–û–î–ê–¢–ï–õ–¨", "–ü–û–ö–ê"]

    # Like shitcode?
    def take_pic_from_Main(self, pic_url):
        global picture
        picture = pic_url
    # Like shitcode?

    def create_new_in_GG(self, dannye):
        BASE_DIR = os.path.dirname(os.path.abspath(__file__))
        db_path = os.path.join(BASE_DIR, "Goods.db")
        with sqlite3.connect(db_path) as db:
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            cursor.execute('''INSERT INTO GG (Name, Address, Address_log, Goods, Period, Coment, Photo, Condition) VALUES (?, ?, ?, ?, ?, ?, ?, ?)''', (f"{dannye[1]} vk.com/id{self._USER_ID}", dannye[2], dannye[2], dannye[3], dannye[4], dannye[5], dannye[6], "–ü—Ä–∏–Ω—è—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"))
            conn.commit()
            conn.close()
        
    def create_new_in_Goods_processed(self, dannye):
        global cond
        cond = 1
        BASE_DIR = os.path.dirname(os.path.abspath(__file__))
        db_path = os.path.join(BASE_DIR, "Goods_In_processing.sqlite")
        with sqlite3.connect(db_path) as db:
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            cursor.execute('''INSERT INTO Goods_processed (ID_from_GG, Who_took, recipient) VALUES (?, ?, ?)''', (dannye[0], dannye[1], dannye[2]))
            conn.commit()
            conn.close()
        self.update_condition_order_GG(dannye[0], cond)
    
    def update_condition_order_GG(self, ID, cond):
        BASE_DIR = os.path.dirname(os.path.abspath(__file__))
        db_path = os.path.join(BASE_DIR, "Goods.db")
        with sqlite3.connect(db_path) as db:
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            print(f"{cond} - –∫–æ–Ω–¥–∏—Ç–∏–æ–Ω")
            if cond == 1:
                cursor.execute(f'''UPDATE GG SET Condition = "–ö—É—Ä—å–µ—Ä –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–∫–∞–∑" WHERE ID = {int(ID)}''')
                conn.commit()
            elif cond == 2:
                cursor.execute(f'''UPDATE GG SET Condition = "–ö—É—Ä—å–µ—Ä –ø–æ–¥—ä–µ—Ö–∞–ª –∫ –≤–∞–º" WHERE ID = {int(ID)}''')
                conn.commit()
            conn.close()



    def get_address(self, address):
        URL = f"https://geocode-maps.yandex.ru/1.x/?apikey={self.API_KEY}&geocode={lat},{lon}&format=json&sco=latlong&kind=house&results=1&lang=ru_RU"
        result = requests.get(URL).json()
        return result['response']['GeoObjectCollection']['featureMember'][0]['GeoObject']['metaDataProperty']['GeocoderMetaData']['text']

    def _get_user_name_from_vk_id(self, user_id):
        request = requests.get("https://vk.com/id" + str(user_id))
        bs = bs4.BeautifulSoup(request.text, "html.parser")

        user_name = self._clean_all_tag_from_str(bs.findAll("title")[0])

        return user_name.split()[0]

    def new_message(self, messag):
        global first_flag_to_debug
        global second_flag_to_debug
        global update_board_return
        # first_flag_to_debug = False
        # second_flag_to_debug = False
        update_board_return = 0
        message = messag.text
        # –ü—Ä–∏–≤–µ—Ç
        if message.upper() == self._COMMANDS[0]:
            return f"–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç, {self._USERNAME}! \n–í–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n¬´–ö—É—Ä—å–µ—Ä¬ª\n¬´–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å¬ª"

        # –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å
        elif message.upper() == self._COMMANDS[2]:
            update_board_return = 2
            return f'–°—É–ø–µ—Ä, –≤—ã —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å!\n–°—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π—Ç–µ —Ñ–æ—Ä–º–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!\n1) –í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ—á–∫–µ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä, –≤—ã–¥–∞–Ω–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π\n2) –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å 1 —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n3) –£—á–∏—Ç—ã–≤–∞—Ç—å —Å–∏–Ω–∫—Ç–∞–∫—Å–∏–∑ –∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é\n4) –ü—Ä–∏ –æ—à–∏–±–æ—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–Ω–æ–≤–∞ –Ω–∞–ø–∏—à–µ—Ç–µ ¬´–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å¬ª\n5) –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –ø–æ —Å—Å—ã–ª–∫–µ \nhttps://vk.com/topic-194515327_44426909\n–í –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–ø–∏—à–µ—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é¬ª'

        elif message.upper() == '–ü–û–î–¢–í–ï–†–ñ–î–ê–Æ':
            update_board_return = 2
            return f'–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–Ω–∏—Ç–µ —Å–æ —Å–ª–æ–≤–∞ ¬´–¢–æ–≤–∞—Ä¬ª\n1) –§–ò–û\n2) –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å\n3) –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n4) –ü–µ—Ä–∏–æ–¥ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è(–¥–µ–Ω—å, –Ω–µ–¥–µ–ª—è, –º–µ—Å—è—Ü, –≥–æ–¥, –Ω–∞–≤—Å–µ–≥–¥–∞)\n5) –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫—É—Ä—å–µ—Ä—É\n6) –ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞'
        
        elif '–¢–û–í–ê–†' in str(message.upper()):
            update_board_return = 2
            if len(message.split('\n')) != 6:
                return f"""1) –ù—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ 1 —Å—Ç—Ä–æ–∫–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç
                           2) –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –≤—ã –Ω–µ –≤–≤–µ–ª–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤"""
            else:
                perem = message.split('\n')
                perem.append(str(picture))
                self.create_new_in_GG(perem)
                return f"–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç"


        # –ü–æ–∫–∞
        elif message.upper() == self._COMMANDS[3]:
            return f"–ü–æ–∫–∞-–ø–æ–∫–∞, {self._USERNAME}!"

        # –ö—É—Ä—å–µ—Ä—Å–∫–∞—è —á–∞—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã
        elif message.upper() == self._COMMANDS[1]:
            update_board_return = 1
            return f"–°—É–ø–µ—Ä, –≤—ã –∫—É—Ä—å–µ—Ä! –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã, –Ω–∞–∂–º–∏—Ç–µ ¬´üëâüèª¬ª"

        # –ö—É—Ä—å–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑
        elif message == 'üëâüèø' or message == 'üëâüèª' or message == 'üëâ':
            first_flag_to_debug = True
            update_board_return = 1
            BASE_DIR = os.path.dirname(os.path.abspath(__file__))
            db_path = os.path.join(BASE_DIR, "Goods.db")
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM GG WHERE Condition="–ü—Ä–∏–Ω—è—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ" ORDER BY RANDOM() LIMIT 1 ')
            results1 = cursor.fetchall()
            global results
            results = "'".join(str(results1)[2:-2].split("'")).split(',')
            conn.close()
            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
            filedata = urlopen(results[-2][2:-1]) 
            datatowrite = filedata.read()
        
            with open('C:\\Users\\666\\Desktop\\GoodsDelivery\\vk_bot-master\\to_send.jpg', 'wb') as f:
                f.write(datatowrite)
            f.close()
            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ
            first_vk_pict = vk.method('photos.getMessagesUploadServer')
            second_vk_pict = requests.post(first_vk_pict['upload_url'], files={'photo': open('C:\\Users\\666\\Desktop\\GoodsDelivery\\vk_bot-master\\to_send.jpg', 'rb')}).json()
            third_vk_pict = vk.method('photos.saveMessagesPhoto', {'photo': second_vk_pict['photo'], 'server': second_vk_pict['server'], 'hash': second_vk_pict['hash']})[0]
            to_return_pic_from_db = 'photo{}_{}'.format(third_vk_pict['owner_id'], third_vk_pict['id']).strip()
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ
            return f"""!!!!!!\n–í–æ—Ç –∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –∑–∞–∫–∞–∑ ‚Ññ{results[0]} \n–ò–º—è –∏ –≤–∫ –∑–∞–∫–∞–∑—á–∏–∫–∞ - {results[1][2:-1]} \n–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ - {results[2][2:-1]} 
            –¢–æ–≤–∞—Ä - {results[4][2:-1]} \n{results[6]} \n–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –Ω–∞–∂–º–∏—Ç–µ ¬´üëçüèª¬ª""", to_return_pic_from_db
        # –ö—É—Ä—å–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑

        elif message.upper() == '–ì–û–¢–û–í–û':
            if second_flag_to_debug:
                second_flag_to_debug = False
                cond = 2
                to_upload = [results[0], f"vk.com/id{self._USER_ID}", f"{results[1]}"]
                self.update_condition_order_GG(to_upload[0], cond)
                return f"–ö–ª–∏–µ–Ω—Ç –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑"
            else:
                return f"–í—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∑–∞–∫–∞–∑, —á—Ç–æ–±—ã –Ω–∞–∂–∏–º–∞—Ç—å '–ì–æ—Ç–æ–≤–æ'"

        # –†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç—å –ª–∏ –∑–∞–∫–∞–∑
        elif message.upper() == 'üëçüèª' or message.upper() == 'üëçüèø' or message.upper() == 'üëç':
            if first_flag_to_debug:
                first_flag_to_debug = False
                second_flag_to_debug = True
                update_board_return = 3
                to_upload = [results[0], f"vk.com/id{self._USER_ID}", f"{results[1]}"]
                self.create_new_in_Goods_processed(to_upload)
                return f"–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑!¬ª –ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª"
            else:
                return f"–ù–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑, –Ω–µ –≤—ã–±—Ä–∞–≤ –∫–∞–∫–æ–π –∑–∞–∫–∞–∑ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–Ω—è—Ç—å"
        elif message.upper() == '–ù–ê–ó–ê–î':
            update_board_return = 0
            return f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É –Ω–∞–∑–∞–¥"

        else:
            return f"–ù–µ –ø–æ–Ω–∏–º–∞—é –æ —á–µ–º –≤—ã...\n–í–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n¬´–ö—É—Ä—å–µ—Ä¬ª\n¬´–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å¬ª"
        # –†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç—å –ª–∏ –∑–∞–∫–∞–∑
        # –ö—É—Ä—å–µ—Ä—Å–∫–∞—è —á–∞—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã
        
    def update_board(self):
        if update_board_return == 0:
            return update_board_return
        if update_board_return == 1:
            return update_board_return
        if update_board_return == 2:
            return update_board_return
        if update_board_return == 3:
            return update_board_return

    @staticmethod
    def _clean_all_tag_from_str(string_line):
        """
        –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ stringLine –æ—Ç —Ç—ç–≥–æ–≤ –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º—ã—Ö
        :param string_line: –û—á–∏—â–∞–µ–º–∞—è —Å—Ç—Ä–æ–∫–∞
        :return: –æ—á–∏—â–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        """
            
        result = ""
        not_skip = True
        for i in list(string_line):
            if not_skip:
                if i == "<":
                    not_skip = False
                else:
                    result += i
            else:
                if i == ">":
                    not_skip = True

        return result
